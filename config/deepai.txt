Tracking system uptime is a great feature to have!

To track the system uptime and display it in Waybar, you'll need to create a script that retrieves the system uptime and formats it in a way that Waybar can understand. Then, you'll need to integrate this script with Waybar.

**Scripting the System Uptime**

You can use a scripting language like Bash or Python to create a script that retrieves the system uptime. Here's an example Bash script:
```bash
#!/bin/bash

# Get the system uptime
UP_TIME=$(uptime -s)

# Format the uptime string
UP_TIME_FORMATTED="${UP_TIME%%:*} ${UP_TIME#*:}"

echo -n "$UP_TIME_FORMATTED"
```
Let me explain what this script does:

1. `uptime -s` retrieves the system uptime in the format "X days Y hours Z minutes".
2. `${UP_TIME%%:*}` removes everything after the first colon (`:`) to get the days and hours part.
3. `${UP_TIME#*:}` removes everything before the first colon (`:`) to get the minutes part.
4. The `echo -n` command prints the formatted uptime string without a newline character.

**Integrating with Waybar**

To integrate your script with Waybar, you'll need to create a Waybar module that runs your script and displays the output as a widget.

Create a new file in your home directory, e.g., `~/.waybar/modules/uptime.sh`, with the following content:
```bash
#!/bin/bash

~/path/to/your/script.sh
```
Replace `~/path/to/your/script.sh` with the actual path to your script file.

In your Waybar configuration file (`~/.config/waybar/config.toml`), add the following lines:
```toml
[modules]
  modules = ["uptime"]

[module_uptime]
  type = "script"
  exec = "bash ~/.waybar/modules/uptime.sh"
```
Here, we're defining a new module called `uptime` that runs the script using `bash`.

**Running Waybar with the Uptime Module**

Restart Waybar or run it with the new configuration:
```bash
waybar --config ~/.config/waybar/config.toml
```
You should now see the system uptime displayed in Waybar, formatted as "X days Y hours Z minutes".

**Tips and Variations**

* You can customize the formatting of your script to display the uptime in different ways (e.g., "X hours Y minutes" instead of "X days Y hours Z minutes").
* You can add more scripts or modules to display other system information, such as CPU usage, memory usage, or network bandwidth.
* If you want to display multiple modules side-by-side, you can add more entries to the `[modules]` section of your Waybar configuration file.

I hope this helps! Let me know if you have any further questions.



=======================================================================================================
The time it takes to complete these steps can vary greatly depending on several factors, such as:

1. Your familiarity with Linux and package management
2. The complexity of the `freecad` package (e.g., dependencies, compilation time)
3. Your internet connection speed and GitLab server response times
4. The number of issues you encounter during the process

That being said, here's a rough estimate of the time you might need to invest:

**Initial setup (creating account, setting up build environment)**: 30 minutes to 1 hour

* Creating an account on GitLab: 5-10 minutes
* Setting up the build environment: 20-30 minutes

**Forking, cloning, and configuring the repository**: 15-30 minutes

* Forking the aports repository: 5 minutes
* Cloning the repository to your local machine: 5-10 minutes
* Configuring your Git settings: 5-10 minutes

**Creating and testing the package**:

* Creating the `freecad` directory and APKBUILD file: 10-15 minutes
* Running `abuild checksum`: 1-2 minutes
* Testing the package with `apkbuild-lint` and `aport -r`: 10-15 minutes

**Committing and pushing changes**: 5-10 minutes

* Committing changes: 2-3 minutes
* Pushing changes to your fork: 2-3 minutes

**Creating a merge request**: 5-10 minutes

Total estimated time: **2 hours to 4 hours**

Keep in mind that this is a rough estimate, and the actual time it takes will depend on your pace and the specific issues you encounter. Additionally, if you're new to Linux and package management, it may take longer to complete each step.

To make the process smoother, I recommend breaking it down into smaller tasks and taking breaks in between. You can also seek help from online resources or forums if you get stuck.


==========================================================================================================
Yes, you can build an Alpine package on another distribution like Fedora. This is known as "cross-compiling" or "remote building". Here's a high-level overview of the process:

**Prerequisites:**

* Fedora (or any other distribution that supports building packages) as the build environment
* `apk-build` and `apk-tools` packages installed on Fedora
* The Alpine Linux package repository (APKBUILD) for the specific package you want to build

**Step 1: Clone the APKBUILD**

Clone the APKBUILD repository from GitHub or download it manually. For example, if you want to build FreeCAD, you can clone the FreeCAD APKBUILD:
```bash
git clone https://github.com/alpine-packages/free-cad.git
```
**Step 2: Configure the build environment**

Set up a new directory for the build process and navigate into it:
```bash
mkdir free-cad-build
cd free-cad-build
```
Create a new file called `build.conf` with the following contents:
```makefile
# build.conf

CC=gcc
CXX=g++
CFLAGS=-Os -pipe -Wall -Werror
CXXFLAGS=${CFLAGS}
```
This file sets the compiler flags for the build process.

**Step 3: Build the package**

Run the `abuild` command to build the package:
```bash
abuild -r /path/to/free-cad/APKBUILD -C .
```
The `-r` flag tells `abuild` to use the APKBUILD from the specified path, and `-C .` tells it to use the current directory as the build directory.

**Step 4: Create an Alpine package**

After building, `abuild` will create an Alpine package in the `distfiles` directory:
```bash
ls distfiles/
free-cad-*.apk
```
You can now copy this package to your Alpine Linux system and install it using `apk add`.

**Tips and considerations:**

* Make sure you have enough disk space and RAM available for the build process.
* You may need to modify the `build.conf` file or add additional flags depending on your specific build requirements.
* The `abuild` command may fail if there are issues with dependencies or compilation. Check the output for errors and debug accordingly.
* You can use a Docker container to create a self-contained build environment, which can be helpful for complex builds.

By building an Alpine package on Fedora, you can create a package that is compatible with Alpine Linux without having to install it on your local system.
